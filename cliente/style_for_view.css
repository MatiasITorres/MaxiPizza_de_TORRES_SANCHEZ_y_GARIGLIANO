
    document.addEventListener('DOMContentLoaded', function() {
        const orderElements = {
            currentOrderList: document.getElementById('current-order-list'),
            currentOrderTotalDisplay: document.getElementById('current-order-total'),
            emptyOrderMessage: document.getElementById('empty-order-message'),
            placeOrderBtn: document.getElementById('place-order-btn'),
            clearOrderBtn: document.getElementById('clear-order-btn'),
            statusMessageDiv: document.getElementById('js-message'),
            existingClientIdSelect: document.getElementById('existing_cliente_id'),
            newClientFieldsDiv: document.getElementById('new-client-fields'),
            newClientNameInput: document.getElementById('new_client_name'),
            newClientPhoneInput: document.getElementById('new_client_phone'),
            newClientLocationInput: document.getElementById('new_client_location')
        };

        let currentOrder = [];

        function showStatusMessage(message, type) {
            orderElements.statusMessageDiv.textContent = message;
            orderElements.statusMessageDiv.className = `status-message ${type}`;
            orderElements.statusMessageDiv.style.display = 'block';
            setTimeout(() => {
                orderElements.statusMessageDiv.style.display = 'none';
            }, 5000);
        }

        function updateOrderDisplay() {
            orderElements.currentOrderList.innerHTML = '';
            let totalAmount = 0;
            if (currentOrder.length === 0) {
                orderElements.currentOrderList.appendChild(orderElements.emptyOrderMessage);
                orderElements.emptyOrderMessage.style.display = 'block';
                orderElements.placeOrderBtn.disabled = true;
                orderElements.clearOrderBtn.disabled = true;
            } else {
                orderElements.emptyOrderMessage.style.display = 'none';
                orderElements.placeOrderBtn.disabled = false;
                orderElements.clearOrderBtn.disabled = false;
                currentOrder.forEach((item, index) => {
                    const listItem = document.createElement('li');
                    const itemSubtotal = item.quantity * item.price;
                    totalAmount += itemSubtotal;
                    listItem.innerHTML = `
                        <span>${item.name} (x${item.quantity})</span>
                        <span>$${itemSubtotal.toFixed(2)}</span>
                        <button class="remove-item-btn" data-index="${index}">X</button>
                    `;
                    orderElements.currentOrderList.appendChild(listItem);
                });
            }
            orderElements.currentOrderTotalDisplay.textContent = `Total: $${totalAmount.toFixed(2)}`;
        }

        orderElements.existingClientIdSelect.addEventListener('change', function() {
            if (this.value === '0') {
                orderElements.newClientFieldsDiv.style.display = 'block';
            } else {
                orderElements.newClientFieldsDiv.style.display = 'none';
                orderElements.newClientNameInput.value = '';
                orderElements.newClientPhoneInput.value = '';
                orderElements.newClientLocationInput.value = '';
            }
        });

        document.querySelectorAll('.add-to-order-btn').forEach(button => {
            button.addEventListener('click', function() {
                const productItem = this.closest('.product-item');
                const productId = productItem.querySelector('.product-name').dataset.id;
                const productName = productItem.querySelector('.product-name').textContent;
                const productPrice = parseFloat(productItem.querySelector('.product-price-value').textContent);
                const quantity = parseInt(productItem.querySelector('.quantity-input').value);
                if (isNaN(quantity) || quantity <= 0) { return; }
                const existingItem = currentOrder.find(item => item.id === productId);
                if (existingItem) {
                    existingItem.quantity += quantity;
                } else {
                    currentOrder.push({ id: productId, name: productName, price: productPrice, quantity: quantity });
                }
                updateOrderDisplay();
            });
        });

        orderElements.currentOrderList.addEventListener('click', function(event) {
            if (event.target.classList.contains('remove-item-btn')) {
                const indexToRemove = parseInt(event.target.dataset.index);
                currentOrder.splice(indexToRemove, 1);
                updateOrderDisplay();
            }
        });

        orderElements.placeOrderBtn.addEventListener('click', async function() {
            const clienteId = parseInt(orderElements.existingClientIdSelect.value);

            if (currentOrder.length === 0) {
                showStatusMessage('No hay productos para el pedido.', 'error');
                return;
            }

            const params = new URLSearchParams();
            params.append('productos_json', JSON.stringify(currentOrder.map(item => ({ producto_id: item.id, cantidad: item.quantity }))));
            params.append('place_order', '1');

            if (clienteId > 0) {
                params.append('cliente_id', clienteId);
            } else {
                if (!orderElements.newClientNameInput.value.trim() || !orderElements.newClientPhoneInput.value.trim() || !orderElements.newClientLocationInput.value.trim()) {
                    showStatusMessage('Por favor, completa todos los campos del cliente no registrado.', 'error');
                    return;
                }
                params.append('new_client_name', orderElements.newClientNameInput.value.trim());
                params.append('new_client_phone', orderElements.newClientPhoneInput.value.trim());
                params.append('new_client_location', orderElements.newClientLocationInput.value.trim());
            }

            try {
                const response = await fetch('empleado_dashboard_controller.php', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: params
                });
                const data = await response.json();
                showStatusMessage(data.message, data.success ? 'success' : 'error');
                if (data.success) {
                    currentOrder = [];
                    updateOrderDisplay();
                    orderElements.existingClientIdSelect.value = '0';
                    orderElements.newClientFieldsDiv.style.display = 'none';
                    orderElements.newClientNameInput.value = '';
                    orderElements.newClientPhoneInput.value = '';
                    orderElements.newClientLocationInput.value = '';
                    setTimeout(() => location.reload(), 1500);
                }
            } catch (error) {
                console.error('Error:', error);
                showStatusMessage('Error de conexión al guardar el pedido.', 'error');
            }
        });

        orderElements.clearOrderBtn.addEventListener('click', () => {
             if (confirm('¿Limpiar el pedido actual?')) {
                currentOrder = [];
                updateOrderDisplay();
             }
        });

        document.querySelectorAll('.update-status-btn').forEach(button => {
            button.addEventListener('click', async function() {
                const orderId = this.dataset.orderId;
                const newStatus = document.querySelector(`.status-selector[data-order-id="${orderId}"]`).value;
                if (!newStatus) return;

                if (confirm(`¿Cambiar estado del Pedido #${orderId} a "${newStatus}"?`)) {
                    const params = new URLSearchParams();
                    params.append('update_order_status', '1');
                    params.append('order_id', orderId);
                    params.append('new_status', newStatus);

                    try {
                        const response = await fetch('empleado_dashboard_controller.php', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                            body: params
                        });
                        const data = await response.json();
                        showStatusMessage(data.message, data.success ? 'success' : 'error');
                        if (data.success) {
                            setTimeout(() => location.reload(), 1500);
                        }
                    } catch (error) {
                        showStatusMessage('Error de conexión al actualizar el estado.', 'error');
                    }
                }
            });
        });

        updateOrderDisplay();
    });
